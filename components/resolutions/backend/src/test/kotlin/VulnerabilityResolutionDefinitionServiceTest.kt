/*
 * Copyright (C) 2025 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.eclipse.apoapsis.ortserver.components.resolutions

import io.kotest.core.spec.style.WordSpec
import io.kotest.matchers.collections.shouldHaveSize
import io.kotest.matchers.nulls.shouldNotBeNull
import io.kotest.matchers.shouldBe

import io.mockk.mockk

import org.eclipse.apoapsis.ortserver.dao.test.DatabaseTestExtension
import org.eclipse.apoapsis.ortserver.dao.test.Fixtures
import org.eclipse.apoapsis.ortserver.model.ChangeEventAction
import org.eclipse.apoapsis.ortserver.model.RepositoryId
import org.eclipse.apoapsis.ortserver.model.UserDisplayName
import org.eclipse.apoapsis.ortserver.model.VulnerabilityResolutionReason
import org.eclipse.apoapsis.ortserver.services.ortrun.OrtRunService

import org.jetbrains.exposed.sql.Database

class VulnerabilityResolutionDefinitionServiceTest : WordSpec({
    val dbExtension = extension(DatabaseTestExtension())

    var repositoryId = 0L
    var runId = 0L

    lateinit var db: Database
    lateinit var fixtures: Fixtures
    lateinit var ortRunService: OrtRunService
    lateinit var definitionService: VulnerabilityResolutionDefinitionService

    beforeEach {
        db = dbExtension.db
        fixtures = dbExtension.fixtures

        repositoryId = fixtures.repository.id
        runId = fixtures.ortRun.id

        ortRunService = OrtRunService(
            db,
            fixtures.advisorJobRepository,
            fixtures.advisorRunRepository,
            fixtures.analyzerJobRepository,
            fixtures.analyzerRunRepository,
            fixtures.evaluatorJobRepository,
            fixtures.evaluatorRunRepository,
            fixtures.ortRunRepository,
            fixtures.reporterJobRepository,
            fixtures.reporterRunRepository,
            fixtures.notifierJobRepository,
            fixtures.notifierRunRepository,
            fixtures.repositoryConfigurationRepository,
            fixtures.repositoryRepository,
            fixtures.resolvedConfigurationRepository,
            fixtures.scannerJobRepository,
            fixtures.scannerRunRepository,
            mockk(),
            mockk()
        )

        definitionService = VulnerabilityResolutionDefinitionService(db, ortRunService)
    }

    "create" should {
        "add a new vulnerability resolution definition and an event in the change log" {
            val userDisplayName = UserDisplayName(
                "abc",
                "Test",
                "Test User"
            )

            val definition = definitionService.create(
                RepositoryId(repositoryId),
                runId,
                userDisplayName,
                listOf("CVE-2020-15250"),
                VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY,
                "Comment."
            )

            with(definition) {
                idMatchers shouldBe listOf("CVE-2020-15250")
                reason shouldBe VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY
                comment shouldBe "Comment."
                archived shouldBe false
                changes shouldHaveSize 1

                with(changes.first()) {
                    user shouldBe userDisplayName
                    action shouldBe ChangeEventAction.CREATE
                }
            }
        }

        "mark the given context run as outdated" {
            definitionService.create(
                RepositoryId(repositoryId),
                runId,
                UserDisplayName(
                    "abc",
                    "Test",
                    "Test User"
                ),
                listOf("CVE-2020-15250"),
                VulnerabilityResolutionReason.INEFFECTIVE_VULNERABILITY,
                "Comment."
            )

            val run = ortRunService.getOrtRun(runId)

            run shouldNotBeNull {
                outdated shouldBe true
                outdatedMessage shouldBe "New vulnerability resolution added."
            }
        }
    }
})
