# Copyright (C) 2024 The ORT Server Authors (See <https://github.com/eclipse-apoapsis/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

configManager {
  # Some secret provider is needed
  secretProvider = secret-file
  # This needs to be set even if no secrets are used.
  configSecretFileList = "/app/resources/secrets.properties"
  # Set this to true to search for secrets from this file first.
  allowSecretsFromConfig = true
}

ktor {
  deployment {
    publicScheme = "http"
    publicFqdn = "localhost"
    publicPort = 8080
    port = 8080
    watch = [ classes ]
  }

  cors {
    allowedHosts = "localhost:5173"
  }

  application {
    modules = [ org.eclipse.apoapsis.ortserver.core.ApplicationKt.module ]
  }
}

jwt {
  issuer = "http://localhost:8081/realms/ort-server"
  jwksUri = "http://keycloak.ort-server.svc.cluster.local/realms/ort-server/protocol/openid-connect/certs"
  audience = "ort-server"
  realm = "ort-server"
}

database {
  host = "postgresql"
  port = 5432
  name = "ort"
  schema = "ort_server"
  username = "postgres"
  password = "postgres"
  connectionTimeout = 30000
  idleTimeout = 600000
  keepaliveTime = 0
  maxLifetime = 1800000
  maximumPoolSize = 5
  minimumIdle = 5
  sslMode = "disable"
}

keycloak {
  accessTokenUrl = "http://keycloak.ort-server.svc.cluster.local/realms/ort-server/protocol/openid-connect/token"
  apiUrl = "http://keycloak.ort-server.svc.cluster.local/admin/realms/ort-server"
  clientId = "ort-server"
  apiUser = "keycloak-admin"
  apiSecret = "keycloak-admin"
  subjectClientId = "ort-server"
  groupPrefix = ""
}

orchestrator {
  sender {
    type = "rabbitMQ"
    serverUri = "amqp://rabbitmq-headless.ort-server.svc.cluster.local:5672"
    queueName = "orchestrator_queue"
  }
}

# For some reason these are not part of the orchestrator.sender block.
rabbitMqUser=admin
rabbitMqPassword=admin

secretsProvider {
  name = "vault"
  name = ${?SECRETS_PROVIDER_NAME}

  # Properties for the Vault provider.
  vaultUri = ${?VAULT_URI}
  vaultRoleId = ${?VAULT_ROLE_ID}
  vaultSecretId = ${?VAULT_SECRET_ID}
  vaultRootPath = ${?VAULT_ROOT_PATH}
  vaultPrefix = ${?VAULT_PREFIX}
  vaultNamespace = ${?VAULT_NAMESPACE}

  # Properties for the file-based provider.
  fileBasedPath = ${?FILE_BASED_PATH}

  # Properties for the Scaleway provider.
  scwServerUrl = ${?SCW_SERVER_URL}
  scwApiVersion = ${?SCW_API_VERSION}
  scwRegion = ${?SCW_REGION}
  scwSecretKey = ${?SCW_SECRET_KEY}
  scwProjectId = ${?SCW_PROJECT_ID}
}

reportStorage {
  name = "database"
  namespace = "reports"
  inMemoryLimit = 1048576
}

logFileService {
  name = "loki"
  name = ${?LOG_FILE_PROVIDER_NAME}
  lokiServerUrl = ${?LOKI_SERVER_URL}
  lokiNamespace = ${?LOKI_NAMESPACE}
  lokiQueryLimit = ${?LOKI_QUERY_LIMIT}
  lokiUsername = ${?LOKI_USERNAME}
  lokiPassword = ${?LOKI_PASSWORD}
  lokiTenantId = ${?LOKI_TENANT_ID}
}

micrometer {
  graphite {
    host = "graphite"
    port = 2003
    protocol = "PLAINTEXT"
    tagsAsPrefix = "ort-server-core"
  }
}
